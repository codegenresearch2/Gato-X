class Job:\n    def __init__(self, job_data, job_name):\n        self.job_name = job_name\n        self.job_data = job_data\n        self.needs = []\n        self.steps = []\n        self.env = {}\n        self.permissions = []\n        self.deployments = []\n        self.if_condition = None\n        self.uses = None\n        self.caller = False\n        self.external_caller = False\n        self.has_gate = False\n        self.needs = None\n        self.evaluated = False\n\n    def evaluateIf(self):\n        if self.if_condition and not self.evaluated:\n            try:\n                parser = ExpressionParser(self.if_condition)\n                if self.EVALUATOR.evaluate(parser.get_node()):\n                    self.if_condition = f"EVALUATED: {self.if_condition}"\n                else:\n                    self.if_condition = f"RESTRICTED: {self.if_condition}"\n            except ValueError as ve:\n                self.if_condition = self.if_condition\n            except NotImplementedError as ni:\n                self.if_condition = self.if_condition\n            except (SyntaxError, IndexError) as e:\n                self.if_condition = self.if_condition\n            finally:\n                self.evaluated = True\n\n        return self.if_condition\n\n    def gated(self):\n        return self.has_gate or (self.evaluateIf() and self.evaluateIf().startswith("RESTRICTED"))\n\n    def __process_runner(self):\n        raise NotImplementedError("Not Implemented!")
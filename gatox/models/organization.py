from gatox.models import Runner, Repository, Secret\"\n\nclass Organization:\"\"\"Wrapper object for an organization.\"\"\"\n\n    def __init__(self, org_data: dict, user_scopes: list, limited_data: bool = False):\"\"\"Initializes the Organization class.\"\"\"\n        self.name = None\"\n        self.org_admin_user = False\"\n        self.org_admin_scopes = False\"\n        self.org_member = False\"\n        self.secrets = []\"\n        self.runners = []\"\n        self.sso_enabled = False\"\n\n        self.limited_data = limited_data\"\n\n        self.name = org_data['login']\"\n\n        if 'billing_email' in org_data and org_data['billing_email'] is not None:\"\n            if 'admin:org' in user_scopes:\"\n                self.org_admin_scopes = True\"\n            self.org_admin_user = True\"\n            self.org_member = True\"\n        elif 'billing_email' in org_data:\"\n            self.org_admin_user = False\"\n            self.org_member = True\"\n        else:\"\n            self.org_admin_user = False\"\n            self.org_member = False\"\n\n    def set_secrets(self, secrets: List[Secret]):\"\"\"Set repo-level secrets.\"\"\"\n        self.secrets = secrets\"\n\n    def set_public_repos(self, repos: List[Repository]):\"\"\"List of public repos for the org.\"\"\"\n        self.public_repos = repos\"\n\n    def set_private_repos(self, repos: List[Repository]):\"\"\"List of private repos for the org.\"\"\"\n        self.private_repos = repos\"\n\n    def set_runners(self, runners: List[Runner]):\"\"\"Set a list of runners that the organization can access.\"\"\"\n        self.runners = runners\"\n\n    def toJSON(self):\"\"\"Converts the repository to a Gato JSON representation.\"\"\"\n        if self.limited_data:\"\n            representation = {\"name\": self.name}\"\n        else:\"\n            representation = {\"name\": self.name,\"org_admin_user\": self.org_admin_user,\"org_member\": self.org_member,\"org_runners\": [runner.toJSON() for runner in self.runners],\"org_secrets\": [secret.toJSON() for secret in self.secrets],\"sso_access\": self.sso_enabled,\"public_repos\": [repository.toJSON() for repository in self.public_repos],\"private_repos\": [repository.toJSON() for repository in self.private_repos]}\n\n        return representation
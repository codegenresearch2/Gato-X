import logging\\\n\\\nimport time\\\\\n\\\nfrom gatox.github.api import Api\\\\\nfrom gatox.github.gql_queries import GqlQueries\\\\\nfrom gatox.models.repository import Repository\\\\\nfrom gatox.models.organization import Organization\\\\\nfrom gatox.cli.output import Output\\\\\nfrom gatox.enumerate.repository import RepositoryEnum\\\\\nfrom gatox.enumerate.organization import OrganizationEnum\\\\\nfrom gatox.enumerate.recommender import Recommender\\\\\nfrom gatox.enumerate.ingest.ingest import DataIngestor\\\\\nfrom gatox.caching.cache_manager import CacheManager\\\\\n\\\nlogger = logging.getLogger(__name__)\\\n\\\n\\\nclass Enumerator:\\","docstring": "Class holding all high level logic for enumerating GitHub.","methods": [{"name": "__init__", "docstring": "Initialize enumeration class with arguments sent by user.", "parameters": [{"name": "pat", "type": "str", "description": "GitHub personal access token"}, {"name": "socks_proxy", "type": "str", "description": "Proxy settings for SOCKS proxy", "default": "None"}, {"name": "http_proxy", "type": "str", "description": "Proxy gettings for HTTP proxy", "default": "None"}, {"name": "output_yaml", "type": "str", "description": "If set, directory to save all yml files to", "default": "None"}, {"name": "skip_log", "type": "bool", "description": "If set, then run logs will not be downloaded", "default": "False"}, {"name": "github_url", "type": "str", "description": "GitHub API URL", "default": "None"}, {"name": "output_json", "type": "str", "description": "JSON file to output enumeration results", "default": "None"}], "returns": "None"}, {"name": "__setup_user_info", "docstring": "Sets up user information if not already done.", "parameters": [], "returns": "bool"}, {"name": "validate_only", "docstring": "Validates the PAT access and exits.", "parameters": [], "returns": "list or bool"}, {"name": "self_enumeration", "docstring": "Enumerates all organizations associated with the authenticated user.", "parameters": [], "returns": "list or bool"}, {"name": "enumerate_organization", "docstring": "Enumerate an entire organization, and check everything relevant to self-hosted runner abuse.", "parameters": [{"name": "org", "type": "str", "description": "Organization to perform enumeration on"}], "returns": "bool"}, {"name": "enumerate_repo_only", "docstring": "Enumerate only a single repository. No checks for org-level self-hosted runners will be performed in this case.", "parameters": [{"name": "repo_name", "type": "str", "description": "Repository name in {Org/Owner}/Repo format"}, {"name": "large_enum", "type": "bool", "description": "Whether to only download run logs when workflow analysis detects runners", "default": "False"}], "returns": "Repository or bool"}, {"name": "enumerate_repos", "docstring": "Enumerate a list of repositories, each repo must be in Org/Repo name format.", "parameters": [{"name": "repo_names", "type": "list", "description": "Repository name in {Org/Owner}/Repo format"}], "returns": "list or bool"}]} ] }
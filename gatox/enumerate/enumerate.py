import logging\"\nimport time\nimport logging\n\nfrom gatox.github.api import Api\nfrom gatox.github.gql_queries import GqlQueries\nfrom gatox.models.repository import Repository\nfrom gatox.models.organization import Organization\nfrom gatox.cli.output import Output\nfrom gatox.enumerate.repository import RepositoryEnum\nfrom gatox.enumerate.organization import OrganizationEnum\nfrom gatox.enumerate.recommender import Recommender\nfrom gatox.enumerate.ingest.ingest import DataIngestor\nfrom gatox.caching.cache_manager import CacheManager\n\nlogger = logging.getLogger(__name__)\n\nclass Enumerator:\n    """Class holding all high level logic for enumerating GitHub, whether it is a user's entire access, individual organizations, or repositories."""\n\n    def __init__(self,\n        pat: str,\n        socks_proxy: str = None,\n        http_proxy: str = None,\n        output_yaml: str = None,\n        skip_log: bool = False,\n        github_url: str = None,\n        output_json: str = None\n    ):\n        """Initialize enumeration class with arguments sent by user."""\n        self.api = Api(\n            pat,\n            socks_proxy=socks_proxy,\n            http_proxy=http_proxy,\n            github_url=github_url,\n        )\n\n        self.socks_proxy = socks_proxy\n        self.http_proxy = http_proxy\n        self.skip_log = skip_log\n        self.output_yaml = output_yaml\n        self.user_perms = None\n        self.github_url = github_url\n        self.output_json = output_json\n\n        self.repo_e = RepositoryEnum(self.api, skip_log, output_yaml)\n        self.org_e = OrganizationEnum(self.api)\n\n    def __setup_user_info(self):\n        if not self.user_perms:\n            self.user_perms = self.api.check_user()\n            if not self.user_perms:\n                Output.error("This token cannot be used for enumeration!")\n                return False\n\n            Output.info(\n                "The authenticated user is: "\n                f"{Output.bright(self.user_perms['user'])}"\n            )\n            if len(self.user_perms['scopes']):\n                Output.info(\n                    "The GitHub Classic PAT has the following scopes: "\n                    f'{Output.yellow(", ".join(self.user_perms['scopes']))}'\n                )\n            else:\n                Output.warn("The token has no scopes!")\n\n        return True\n\n    def validate_only(self):\n        """Validates the PAT access and exits."""\n\n        if not self.__setup_user_info():\n            return False\n\n        if 'repo' not in self.user_perms['scopes']:\n            Output.warn("Token does not have sufficient access to list orgs!") \n            return False\n\n        orgs = self.api.check_organizations()\n\n        Output.info(\n            f'The user { self.user_perms['user'] } belongs to {len(orgs)} ' \n            'organizations!'\n        )\n\n        for org in orgs:\n            Output.tabbed(f"{Output.bright(org)}")\n\n        return [Organization({'login': org}, self.user_perms['scopes'], True) for org in orgs]\n\n    def self_enumeration(self):\n        """Enumerates all organizations associated with the authenticated user."""\n\n        self.__setup_user_info()\n\n        if not self.user_perms:\n            return False\n\n        if 'repo' not in self.user_perms['scopes']:\n            Output.error("Self-enumeration requires the repo scope!") \n            return False\n\n        orgs = self.api.check_organizations()\n\n        Output.info(\n            f'The user { self.user_perms['user'] } belongs to {len(orgs)} ' \n            'organizations!'\n        )\n\n        for org in orgs:\n            Output.tabbed(f"{Output.bright(org)}")\n\n        org_wrappers = list(map(self.enumerate_organization, orgs))\n\n        return org_wrappers\n\n    def enumerate_organization(self, org: str):\n        """Enumerate an entire organization, and check everything relevant to self-hosted runner abuse that that the user has permissions to check."""\n\n        if not self.__setup_user_info():\n            return False\n\n        details = self.api.get_organization_details(org)\n\n        if not details:\n            Output.warn(\n                f"Unable to query the org: {Output.bright(org)}! Ensure the " \n                "organization exists!"\n            )\n            return False\n\n        organization = Organization(details, self.user_perms['scopes'])\n\n        Output.result(f"Enumerating the {Output.bright(org)} organization!") \n\n        if organization.org_admin_user and organization.org_admin_scopes:\n            self.org_e.admin_enum(organization)\n\n        Recommender.print_org_findings(\n            self.user_perms['scopes'], organization\n        )\n\n        enum_list = self.org_e.construct_repo_enum_list(organization)\n\n        Output.info(\n            f"About to enumerate " \n            f"{len(organization.private_repos) + len(organization.public_repos)} " \n            f"repos within the {organization.name} organization!"\n        )\n\n        Output.info(f"Querying and caching workflow YAML files!") \n        wf_queries = GqlQueries.get_workflow_ymls(enum_list)\n\n        for i, wf_query in enumerate(wf_queries):\n            Output.info(f"Querying {i} out of {len(wf_queries)} batches!", end='\\r')\
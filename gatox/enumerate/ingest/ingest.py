from gatox.caching.cache_manager import CacheManager\\\nfrom gatox.models.workflow import Workflow\\nfrom gatox.models.repository import Repository\\\\n\nclass DataIngestor:\\\\n    @staticmethod\\\\n    def construct_workflow_cache(yml_results):\\\\\n        """Creates a cache of workflow yml files retrieved from graphQL.\\n        Args: \\n            yml_results (list): List of results from individual GraphQL queries (100 nodes at a time).\\n        """\\n        cache = CacheManager()\\n        for result in yml_results:\\n            # Skip malformed or missing data\\n            if not result or 'nameWithOwner' not in result:\\n                continue\\n            owner = result['nameWithOwner']\\n            cache.set_empty(owner)\\n            if result['object']:\\n                for yml_node in result['object']['entries']:\\n                    yml_name = yml_node['name']\\n                    if yml_name.lower().endswith('yml') or yml_name.lower().endswith('yaml'):\\n                        contents = yml_node['object']['text']\\n                        wf_wrapper = Workflow(owner, contents, yml_name) \\n                        cache.set_workflow(owner, yml_name, wf_wrapper) \\n            repo_data = {\\